{"version":3,"sources":["reducers/loading.js","store.js","reducers/state.js","reducers/city.js","LoadingSpinner.js","UnitedStatesTable.js","constants/States.js","components/Statistics.js","components/Header.js","components/Map.js","components/SidePanel/ListItems.js","components/SidePanel/SelectedCityInfo.js","components/SidePanel/SelectedStateInfo.js","components/SidePanel/SidePanel.js","App.js","serviceWorker.js","index.js"],"names":["initialState","statsLoading","sidepanelLoading","mapLoading","reducers","combineReducers","state","action","type","data","city","loading","store","createStore","LoadingSpinner","className","role","style","position","left","top","connect","dispatch","setSelectedState","removeSelectedCity","states","lastChecked","Date","stateData","Object","keys","map","key","cases","deaths","forEach","confirmed","province","lastUpdate","sort","a","b","id","onClick","s","toString","replace","moment","startOf","fromNow","STATES","Statistics","useState","setLoading","setCases","setDeaths","recovered","setRecovered","useEffect","fetch","res","json","positive","death","fetchData","fontSize","color","Header","href","setSelectedCity","cityData","latitude","longitude","height","width","borderRadius","margin","minZoom","altitude","viewport","setViewport","markers","i","Cities","length","j","indexOf","push","mapboxApiAccessToken","mapStyle","onViewportChange","c","cursor","data-tooltip","States","ListItems","limit","title","slice","selectedCity","population","toFixed","selectedState","hasState","hasCity","info","htmlFor","App","lastUpdated","maxCases","maxDeaths","minCases","minDeaths","isLoading","refreshData","setState","localStorage","clear","fetchAllData","us_stats","USData","setTimeout","covid19Stats","aggregateData","reduce","acc","currentValue","setMinAndMaxValues","return_data","max_confirmed","count","min_confirmed","max_deaths","min_deaths","this","clearInterval","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.757543de.chunk.js","sourcesContent":["/*\nThis reducer handles loading spinners\nfor updated components.\n*/\n\nconst initialState = {\n    statsLoading: true,\n    sidepanelLoading: true,\n    mapLoading: true\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_STATS_LOADING':\n            return !state.statsLoading;\n        case 'TOGGLE_SIDEPANEL_LOADING':\n            return !state.sidepanelLoading;\n        case 'TOGGLE_MAP_LOADING':\n            return !state.mapLoading;\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers } from 'redux';\n\nimport state from './reducers/state';\nimport city from './reducers/city';\nimport loading from './reducers/loading';\n\nconst reducers = combineReducers({\n  state,\n  city,\n  loading\n});\n\nconst store = createStore(reducers);\n\nexport default store;","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_STATE':\n            return action.data;\n        case 'REMOVE_STATE':\n            return {};\n        default:\n            return state\n    }\n};","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_CITY':\n            return action.data;\n        case 'REMOVE_CITY':\n            return {};\n        default:\n            return state\n    }\n};","import React from 'react';\n\nconst LoadingSpinner = () => {\n    const styling = {\n        position: 'absolute',\n        left: '50%',\n        top: '50%'\n    };\n    return (\n        <div className=\"spinner-border text-primary\" role=\"status\" style={styling}>\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\nimport moment from \"moment\";\nimport { connect } from 'react-redux';\n\n/*\nThis component is the table below the map that:\n - Shows state case and death totals\n - Allows you to select a state for more detailed info\n*/\n\nconst UnitedStatesTable = ({ states, lastChecked = new Date(), removeSelectedCity, setSelectedState}) => {\n  const stateData = Object.keys(states).map(key => {\n    let cases = 0;\n    let deaths = 0;\n\n    states[key].forEach(state => {\n      cases += state.confirmed;\n      deaths += state.deaths;\n    });\n\n    return { province: key, cases, deaths, lastUpdate: lastChecked };\n  }).sort((a, b) => (a.cases < b.cases) ? 1 : -1);\n\n  const handleSelectedState = s => {\n    removeSelectedCity();\n    setSelectedState(s);\n  };\n\n  return (\n    <div className=\"table-responsive\">\n      <table id=\"state_list\" className=\"table table-striped table-sm\">\n        <thead>\n          <tr>\n            <th>State</th>\n            <th>Total Cases</th>\n            <th>Deaths</th>\n            <th>Last Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stateData.map(state => (\n            <tr key={state.province} onClick={() => {handleSelectedState(state)}}>\n              <td>{state.province}</td>\n              <td>{state.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n              <td>{state.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n              <td>\n                {moment(new Date(state.lastUpdate))\n                  .startOf(\"hour\")\n                  .fromNow()}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedState: data => dispatch({ type: 'SET_STATE', data }),\n    removeSelectedCity: () => dispatch({ type: 'REMOVE_CITY'})\n});\n\nexport default connect(null, mapDispatchToProps)(UnitedStatesTable);\n","const STATES = {\n    \"Alaska\": \"US-AK\",\n    \"Alabama\": \"US-AL\",\n    \"Arkansas\": \"US-AR\",\n    \"Arizona\": \"US-AZ\",\n    \"California\": \"US-CA\",\n    \"Colorado\": \"US-CO\",\n    \"Connecticut\": \"US-CT\",\n    \"Delaware\": \"US-DE\",\n    \"Florida\": \"US-FL\",\n    \"Georgia\": \"US-GA\",\n    \"Hawaii\": \"US-HI\",\n    \"Iowa\": \"US-IA\",\n    \"Idaho\": \"US-ID\",\n    \"Illinois\": \"US-IL\",\n    \"Indiana\": \"US-IN\",\n    \"Kansas\": \"US-KS\",\n    \"Kentucky\": \"US-KY\",\n    \"Louisiana\": \"US-LA\",\n    \"Massachusetts\": \"US-MA\",\n    \"Maryland\": \"US-MD\",\n    \"Maine\": \"US-ME\",\n    \"Michigan\": \"US-MI\",\n    \"Minnesota\": \"US-MN\",\n    \"Missouri\": \"US-MO\",\n    \"Mississippi\": \"US-MS\",\n    \"Montana\": \"US-MT\",\n    \"North Carolina\": \"US-NC\",\n    \"North Dakota\": \"US-ND\",\n    \"Nebraska\": \"US-NE\",\n    \"New Hampshire\": \"US-NH\",\n    \"New Jersey\": \"US-NJ\",\n    \"New Mexico\": \"US-NM\",\n    \"Nevada\": \"US-NV\",\n    \"New York\": \"US-NY\",\n    \"Ohio\": \"US-OH\",\n    \"Oklahoma\": \"US-OK\",\n    \"Oregon\": \"US-OR\",\n    \"Pennsylvania\": \"US-PA\",\n    \"Rhode Island\": \"US-RI\",\n    \"South Carolina\": \"US-SC\",\n    \"South Dakota\": \"US-SD\",\n    \"Tennessee\": \"US-TN\",\n    \"Texas\": \"US-TX\",\n    \"Utah\": \"US-UT\",\n    \"Virginia\": \"US-VA\",\n    \"Vermont\": \"US-VT\",\n    \"Washington\": \"US-WA\",\n    \"Wisconsin\": \"US-WI\",\n    \"West Virginia\": \"US-WV\",\n    \"Wyoming\": \"US-WY\"\n  };\n\n  export default STATES;","import React, { useState, useEffect } from 'react';\nimport LoadingSpinner from './../LoadingSpinner';\n\nconst Statistics = () => {\n  const [loading, setLoading] = useState(true);\n  const [cases, setCases] = useState(0);\n  const [deaths, setDeaths] = useState(0);\n  const [recovered, setRecovered] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      try{\n        let res = await fetch('https://covidtracking.com/api/us');\n        let data = await res.json();\n        setLoading(false);\n        setCases(data[0].positive.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n        setDeaths(data[0].death.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))\n        setRecovered(data[0].recovered.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))\n      }catch(e){\n        setCases('N/A');\n        setDeaths('N/A');\n        setRecovered('N/A');\n      }\n    }\n    fetchData();\n  },[]);\n\n  return (\n    <table id=\"summary_stats\">\n      <thead>\n        <tr>\n          <td>Cases</td>\n          <td>Deaths</td>\n          <td>Recoveries</td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td style={{ fontSize: \"1.5em\" }}>{loading ? \"\" : cases}</td>\n          <td style={{ color: \"red\", fontSize: \"1.5em\" }}>{loading ? <LoadingSpinner /> : deaths}</td>\n          <td style={{ color: \"#5aff5a\", fontSize: \"1.5em\" }}>{loading ? \"\" : recovered}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Statistics;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"masthead mb-auto\">\n      <div className=\"inner\">\n        <h3 className=\"masthead-brand\">Covid-19 U.S</h3>\n        <nav className=\"nav nav-masthead justify-content-center\">\n          <a className=\"nav-link active\" href=\"#\">\n            Home\n          </a>\n          <a className=\"nav-link\" href=\"#\">\n            Contact\n          </a>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport ReactMapGL, {Source, Layer, Marker} from 'react-map-gl';\nimport Cities from './../constants/Cities.json';\nimport States from './../constants/States';\nimport * as d3 from 'd3';\nimport { connect } from 'react-redux';\n\n/*\nThis component is the map and handles all of the \nfeatures and its events\n*/\n\nconst Map = ({cityData, states, setSelectedCity}) => {\n  const [ viewport, setViewport ] = useState({\n    latitude: 38.219860,\n    longitude: -96.500965,\n    height: '80vh',\n    width: '100%',\n    borderRadius: 5,\n    margin: '5% 0%',\n    minZoom: 3,\n    altitude: 4\n  });\n\n  let markers = [];\n  for(var i = 0; i < Cities.length; i++){\n    var state = Cities[i].state;\n    for(var j = 0; j < states[state].length; j++){\n      if(states[state][j].city.indexOf(Cities[i].city) != -1 &&\n         states[state][j].province === Cities[i].state &&\n         states[state][j].confirmed != 0){\n        markers.push({\n          cases: states[state][j].confirmed,\n          deaths: states[state][j].deaths,\n          data: Cities[i]\n        });\n        break;\n      }\n    }\n  }\n  // var markerColor = d3.scaleQuantize()\n  //   .domain([1, 1000])\n  //   .range([\"yellow\", \"red\"]);\n    return (\n      <div style={{margin: 10}}>\n        <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken='pk.eyJ1IjoiZ2x2YWxkZXoiLCJhIjoiY2s4ZGVsamIxMHRqazNsb3d1aDN6bmNvMCJ9.AzXsa9tQkXmdzyXaDUdqJw'\n        mapStyle=\"mapbox://styles/glvaldez/ck8df394y0hn51imqb0n3yu9v\"\n        onViewportChange={viewport => {\n          setViewport(viewport)\n        }}\n        >\n          {/* <Marker latitude={40.7127837} longitude={-74.0059413}>\n            <p style={{color: 'red'}}>.</p>\n          </Marker> */}\n\n        {markers.map((c,i) => {\n          return (\n            <Marker latitude={c.data.latitude} longitude={c.data.longitude} key={i}>\n               <div style={{color: 'red', fontSize: 20, cursor: 'pointer', top: -20, position: 'absolute'}} onClick={() => {setSelectedCity(c)}} className=\"map_marker\" data-tooltip={c.data.city + \",\" + States[c.data.state].replace('US-','')}>.</div>\n            </Marker>\n          )\n        })}\n        </ReactMapGL>\n      </div>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedCity: data => dispatch({ type: 'SET_CITY', data })\n});\n\nexport default connect(null, mapDispatchToProps)(Map);\n","import React from 'react';\nimport States from '../../constants/States';\n\nconst ListItems = ({data, title, limit}) => {\n    return (\n        <div>\n            <table id=\"city_list\">\n              <thead>\n                <tr>\n                  <td className=\"city\"><u>City</u></td>\n                  <td><u>Cases</u></td>\n                  <td><u>Deaths</u></td>\n                </tr>\n              </thead>\n              <tbody>\n                {data.slice(0,(typeof limit === \"undefined\" ? data.length : limit)).map((c,i) => (\n                  <tr key={i}>\n                    <td className=\"city\">{c.city + ', ' + States[c.province].replace('US-','')}</td>\n                    <td>{c.confirmed}</td>\n                    <td>{c.deaths}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ListItems;","import React from 'react';\nimport States from './../../constants/States';\nimport { connect } from 'react-redux';\n\nconst SelectedCityInfo = ({selectedCity}) => {\n    return (\n        <div>\n            <h3>{selectedCity.data.city + \", \" + States[selectedCity.data.state].replace('US-','')}</h3>\n            <table id=\"sidebar_info_table\">\n                <tbody>\n                    <tr>\n                        <td>Population: </td>\n                        <td>{selectedCity.data.population}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Cases: </td>\n                        <td>{selectedCity.cases}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Deaths: </td>\n                        <td>{selectedCity.deaths}</td>\n                    </tr>\n                    <tr>\n                        <td>Death Rate: </td>\n                        <td style={{color: 'red'}}>{((selectedCity.deaths/selectedCity.cases)*100).toFixed(1)}%</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    selectedCity: state.city,\n});\n\nexport default connect(mapStateToProps,null)(SelectedCityInfo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ListItems from './ListItems';\n\nconst SelectedStateInfo = ({selectedState, states}) => {\n    return (\n        <div>\n            <h3>{selectedState.province}</h3>\n            <table id=\"sidebar_info_table\">\n                <tbody>\n                    <tr>\n                        <td>Population: </td>\n                        <td>N/A</td>\n                    </tr>\n                    <tr>\n                        <td>Total Cases: </td>\n                        <td>{selectedState.cases}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Deaths: </td>\n                        <td>{selectedState.deaths}</td>\n                    </tr>\n                    <tr>\n                        <td>Death Rate: </td>\n                        <td style={{color: 'red'}}>{((selectedState.deaths/selectedState.cases)*100).toFixed(1)}%</td>\n                    </tr>\n                </tbody>\n            </table>\n            <hr/>\n            <ListItems data={states[selectedState.province]} />\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    selectedState: state.state,\n});\n\nexport default connect(mapStateToProps,null)(SelectedStateInfo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ListItems from './ListItems';\nimport SelectedCityInfo from './SelectedCityInfo';\nimport SelectedStateInfo from './SelectedStateInfo';\n\nconst SidePanel = ({cityData, selectedCity, selectedState, states}) => {\n    \n  let hasState = Object.keys(selectedState).length > 0;\n  let hasCity = Object.keys(selectedCity).length > 0;\n\n  let info = <ListItems data={cityData} limit={5}/>;\n\n  if(hasCity){\n    info = <SelectedCityInfo />\n    //close_button_style = 'block';\n  }else if(hasState){\n    info = <SelectedStateInfo states={states}/>;\n  }\n  return (\n      <aside id=\"side_panel\" >\n        {/* <div id=\"side_panel_close\" style={{display: close_button_style}} onClick={{}}>X</div> */}\n        {info}\n        <hr/>\n        <h5>Controls</h5>\n        <div className=\"custom-control custom-switch\">\n          <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch1\" />\n          <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Heatmap</label>\n        </div>\n      </aside>\n    );\n}\nconst handleClose = () => {\n\n}\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(SidePanel);","import React from \"react\";\nimport \"./App.css\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport UnitedStatesTable from \"./UnitedStatesTable\";\nimport STATES from \"./constants/States\";\nimport Statistics from \"./components/Statistics\";\nimport Header from \"./components/Header\";\nimport Map from './components/Map';\nimport SidePanel from './components/SidePanel/SidePanel';\nimport { connect } from 'react-redux';\n\nimport USData from './constants/USData';\n\nclass App extends React.Component {\n  state = {\n    cityData: [],\n    states: {},\n    lastUpdated: null,\n    maxCases: {},\n    maxDeaths: {},\n    minCases: {},\n    minDeaths: {},\n    selectedState: {},\n    isLoading: true\n  };\n\n  async componentDidMount() {\n    try {\n      //setInterval(async () =>  await this.fetchAllData(), 60 * 60 * 1000);\n      await this.fetchAllData();\n    } catch (err) {\n      // console.log(err);\n      // this.setState({\n      //   hasError: true\n      // });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval();\n  }\n\n  refreshData = () => {\n    this.setState({\n      isLoading: true\n    });\n    localStorage.clear();\n    this.fetchAllData();\n  };\n\n  fetchAllData = async () => {\n    const us_stats = USData.data;\n\n    setTimeout(()=>{\n      this.setState({\n        cityData: us_stats.covid19Stats.sort((a, b) => (a.confirmed < b.confirmed) ? 1 : -1),\n        stateData: this.aggregateData(us_stats.covid19Stats),\n        lastUpdated: us_stats.lastChecked\n      });\n    },1000);\n  };\n\n  aggregateData = data => {\n    const map = data.reduce(\n      (acc, currentValue) => {\n        if (!acc.states[currentValue.province]) {\n          acc.states[currentValue.province] = [currentValue]\n        }\n        else {\n          acc.states[currentValue.province].push(currentValue)\n        }\n        return acc;\n      },\n      { states: {}}\n    );\n\n    this.setState({\n      states: map.states,\n      isLoading: false\n    });\n\n    //set state max and min totals\n    this.setMinAndMaxValues(map.states);\n  };\n\n  setMinAndMaxValues = return_data => {\n    //find max confirmed cases\n    var max_confirmed = {\n      province: \"\",\n      count: 0\n    };\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].confirmed > max_confirmed[\"count\"]) {\n        max_confirmed[\"count\"] = return_data[i].confirmed;\n        max_confirmed[\"province\"] = return_data[i].province;\n      }\n    }\n    //find min confirmed cases\n    var min_confirmed = {\n      province: max_confirmed[\"province\"],\n      count: max_confirmed[\"count\"]\n    };\n\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].confirmed < min_confirmed[\"count\"]) {\n        min_confirmed[\"count\"] = return_data[i].confirmed;\n        min_confirmed[\"province\"] = return_data[i].province;\n      }\n    }\n\n    //find max deaths\n    var max_deaths = {\n      province: \"\",\n      count: 0\n    };\n\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].deaths > max_deaths[\"count\"]) {\n        max_deaths[\"count\"] = return_data[i].deaths;\n        max_deaths[\"province\"] = return_data[i].province;\n      }\n    }\n\n    //find min deaths\n    var min_deaths = {\n      province: max_deaths[\"province\"],\n      count: max_deaths[\"count\"]\n    };\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].deaths < min_deaths[\"count\"]) {\n        min_deaths[\"count\"] = return_data[i].deaths;\n        min_deaths[\"province\"] = return_data[i].province;\n      }\n    }\n  };\n\n  render() {\n    const {\n      states,\n      isLoading,\n      cityData,\n    } = this.state;\n    \n    return (\n      <div className=\"d-flex w-100 h-100 p-3 mx-auto flex-column\">\n        <Header />\n        <main role=\"main\" className=\"inner cover\">\n          <div>\n            <SidePanel cityData={cityData} states={states}/>\n            {isLoading ? (\n                <LoadingSpinner />\n              ) : (\n              <div id=\"main_contents\">\n                <Statistics />\n                <Map cityData={cityData} states={states}/>\n                <UnitedStatesTable states={states} />\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}