{"version":3,"sources":["store.js","reducers/state.js","reducers/city.js","LoadingSpinner.js","UnitedStatesTable.js","constants/States.js","components/Statistics.js","components/Header.js","components/Map.js","components/SidePanel/CityListItems.js","components/SidePanel/SelectedCityInfo.js","components/SidePanel/SidePanel.js","App.js","serviceWorker.js","index.js"],"names":["reducers","combineReducers","state","action","type","data","city","store","createStore","LoadingSpinner","className","role","style","position","left","top","UnitedStatesTable","states","lastChecked","Date","stateData","Object","keys","map","key","cases","deaths","forEach","confirmed","province","lastUpdate","sort","a","b","id","moment","startOf","fromNow","STATES","Statistics","recovered","fontSize","toString","replace","color","Header","href","connect","dispatch","setCity","cityData","useState","latitude","longitude","height","width","borderRadius","margin","minZoom","altitude","viewport","setViewport","markers","i","Cities","length","j","indexOf","push","mapboxApiAccessToken","mapStyle","onViewportChange","c","cursor","onClick","data-tooltip","States","CityListItems","title","slice","selectedCity","population","toFixed","selectedState","info","htmlFor","App","us_cases","us_deaths","us_recovered","lastUpdated","maxCases","maxDeaths","minCases","minDeaths","isLoading","refreshData","setState","localStorage","clear","fetchAllData","us_stats","USData","setTimeout","covid19Stats","aggregateData","reduce","acc","currentValue","toLowerCase","setMinAndMaxValues","return_data","max_confirmed","count","min_confirmed","max_deaths","min_deaths","this","clearInterval","props","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c00db3a.chunk.js","sourcesContent":["import { createStore, combineReducers } from 'redux';\n\nimport state from './reducers/state';\nimport city from './reducers/city';\n\nconst reducers = combineReducers({\n  state,\n  city\n});\n\nconst store = createStore(reducers);\n\nexport default store;","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_STATE':\n            return action.data;\n        case 'REMOVE_STATE':\n            return {};\n        default:\n            return state\n    }\n};","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_CITY':\n            return action.data;\n        case 'REMOVE_CITY':\n            return {};\n        default:\n            return state\n    }\n};","import React from 'react';\n\nconst LoadingSpinner = () => {\n    const styling = {\n        position: 'absolute',\n        left: '50%',\n        top: '50%'\n    };\n    return (\n        <div className=\"spinner-border text-primary\" role=\"status\" style={styling}>\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\nimport moment from \"moment\";\n\nconst UnitedStatesTable = ({ states, lastChecked = new Date() }) => {\n  const stateData = Object.keys(states).map(key => {\n    let cases = 0;\n    let deaths = 0;\n\n    states[key].forEach(state => {\n      cases += state.confirmed;\n      deaths += state.deaths;\n    });\n\n    return { province: key, cases, deaths, lastUpdate: lastChecked };\n  }).sort((a, b) => (a.cases < b.cases) ? 1 : -1);\n\n  //stateData = stateData.sort((a, b) => (a.confirmed > b.confirmed) ? 1 : -1)\n\n  return (\n    <div className=\"table-responsive\">\n      <table id=\"state_list\" className=\"table table-striped table-sm\">\n        <thead>\n          <tr>\n            <th>State</th>\n            <th>Total Cases</th>\n            <th>Deaths</th>\n            <th>Last Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stateData.map(state => (\n            <tr key={state.province}>\n              <td>{state.province}</td>\n              <td>{state.cases}</td>\n              <td>{state.deaths}</td>\n              <td>\n                {moment(new Date(state.lastUpdate))\n                  .startOf(\"hour\")\n                  .fromNow()}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default UnitedStatesTable;\n","const STATES = {\n    \"Alaska\": \"US-AK\",\n    \"Alabama\": \"US-AL\",\n    \"Arkansas\": \"US-AR\",\n    \"Arizona\": \"US-AZ\",\n    \"California\": \"US-CA\",\n    \"Colorado\": \"US-CO\",\n    \"Connecticut\": \"US-CT\",\n    \"Delaware\": \"US-DE\",\n    \"Florida\": \"US-FL\",\n    \"Georgia\": \"US-GA\",\n    \"Hawaii\": \"US-HI\",\n    \"Iowa\": \"US-IA\",\n    \"Idaho\": \"US-ID\",\n    \"Illinois\": \"US-IL\",\n    \"Indiana\": \"US-IN\",\n    \"Kansas\": \"US-KS\",\n    \"Kentucky\": \"US-KY\",\n    \"Louisiana\": \"US-LA\",\n    \"Massachusetts\": \"US-MA\",\n    \"Maryland\": \"US-MD\",\n    \"Maine\": \"US-ME\",\n    \"Michigan\": \"US-MI\",\n    \"Minnesota\": \"US-MN\",\n    \"Missouri\": \"US-MO\",\n    \"Mississippi\": \"US-MS\",\n    \"Montana\": \"US-MT\",\n    \"North Carolina\": \"US-NC\",\n    \"North Dakota\": \"US-ND\",\n    \"Nebraska\": \"US-NE\",\n    \"New Hampshire\": \"US-NH\",\n    \"New Jersey\": \"US-NJ\",\n    \"New Mexico\": \"US-NM\",\n    \"Nevada\": \"US-NV\",\n    \"New York\": \"US-NY\",\n    \"Ohio\": \"US-OH\",\n    \"Oklahoma\": \"US-OK\",\n    \"Oregon\": \"US-OR\",\n    \"Pennsylvania\": \"US-PA\",\n    \"Rhode Island\": \"US-RI\",\n    \"South Carolina\": \"US-SC\",\n    \"South Dakota\": \"US-SD\",\n    \"Tennessee\": \"US-TN\",\n    \"Texas\": \"US-TX\",\n    \"Utah\": \"US-UT\",\n    \"Virginia\": \"US-VA\",\n    \"Vermont\": \"US-VT\",\n    \"Washington\": \"US-WA\",\n    \"Wisconsin\": \"US-WI\",\n    \"West Virginia\": \"US-WV\",\n    \"Wyoming\": \"US-WY\"\n  };\n\n  export default STATES;","import React from \"react\";\n\nconst Statistics = ({ cases, deaths, recovered }) => {\n  return (\n    <table id=\"summary_stats\">\n      <thead>\n        <tr>\n          <td>Cases</td>\n          <td>Deaths</td>\n          <td>Recoveries</td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td style={{ fontSize: \"1.5em\" }}>{cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n          <td style={{ color: \"red\", fontSize: \"1.5em\" }}>{deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n          <td style={{ color: \"#5aff5a\", fontSize: \"1.5em\" }}>{recovered.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Statistics;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"masthead mb-auto\">\n      <div className=\"inner\">\n        <h3 className=\"masthead-brand\">U.S Coronavirus Cases</h3>\n        <nav className=\"nav nav-masthead justify-content-center\">\n          <a className=\"nav-link active\" href=\"#\">\n            Home\n          </a>\n          <a className=\"nav-link\" href=\"#\">\n            Contact\n          </a>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { useState } from 'react';\nimport ReactMapGL, {Source, Layer, Marker} from 'react-map-gl';\nimport Cities from './../constants/Cities.json';\nimport States from './../constants/States';\nimport * as d3 from 'd3';\nimport { connect } from 'react-redux';\n\nconst Map = ({cityData, states, setCity}) => {\n  const [ viewport, setViewport ] = useState({\n    latitude: 38.219860,\n    longitude: -96.500965,\n    height: '80vh',\n    width: '100%',\n    borderRadius: 5,\n    margin: '5% 0%',\n    minZoom: 3,\n    altitude: 4\n  });\n\n  let markers = [];\n  for(var i = 0; i < Cities.length; i++){\n    var state = Cities[i].state;\n    for(var j = 0; j < states[state].length; j++){\n      if(states[state][j].city.indexOf(Cities[i].city) != -1 &&\n         states[state][j].province === Cities[i].state &&\n         states[state][j].confirmed != 0){\n        markers.push({\n          cases: states[state][j].confirmed,\n          deaths: states[state][j].deaths,\n          data: Cities[i]\n        });\n        break;\n      }\n    }\n  }\n  // var markerColor = d3.scaleQuantize()\n  //   .domain([1, 1000])\n  //   .range([\"yellow\", \"red\"]);\n    return (\n      <div style={{margin: 10}}>\n        <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken='pk.eyJ1IjoiZ2x2YWxkZXoiLCJhIjoiY2s4ZGVsamIxMHRqazNsb3d1aDN6bmNvMCJ9.AzXsa9tQkXmdzyXaDUdqJw'\n        mapStyle=\"mapbox://styles/glvaldez/ck8df394y0hn51imqb0n3yu9v\"\n        onViewportChange={viewport => {\n          setViewport(viewport)\n        }}\n        >\n          {/* <Marker latitude={40.7127837} longitude={-74.0059413}>\n            <p style={{color: 'red'}}>.</p>\n          </Marker> */}\n\n        {markers.map((c,i) => {\n          return (\n            <Marker latitude={c.data.latitude} longitude={c.data.longitude} key={i}>\n               <div style={{color: 'red', fontSize: 20, cursor: 'pointer', top: -20, position: 'absolute'}} onClick={() => {setCity(c)}} className=\"map_marker\" data-tooltip={c.data.city + \",\" + States[c.data.state].replace('US-','')}>.</div>\n            </Marker>\n          )\n        })}\n        </ReactMapGL>\n      </div>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setCity: data => dispatch({ type: 'SET_CITY', data })\n});\n\nexport default connect(null, mapDispatchToProps)(Map);\n","import React from 'react';\nimport States from './../../constants/States';\n\nconst CityListItems = ({cityData, title}) => {\n    return (\n        <div>\n            <h4>Top 5 Cities</h4>\n            <table id=\"city_list\">\n              <thead>\n                <tr>\n                  <td>City</td>\n                  <td>Cases</td>\n                  <td>Deaths</td>\n                </tr>\n              </thead>\n              <tbody>\n                {cityData.slice(0,5).map((c,i) => (\n                  <tr key={i}>\n                    <td>{c.city + ',' + States[c.province].replace('US-','')}</td>\n                    <td>{c.confirmed}</td>\n                    <td>{c.deaths}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default CityListItems;","import React from 'react';\nimport States from './../../constants/States';\nimport { connect } from 'react-redux';\n\nconst SelectedCityInfo = ({selectedCity}) => {\n    return (\n        <div>\n            <h3>{selectedCity.data.city + \", \" + States[selectedCity.data.state].replace('US-','')}</h3>\n            <table id=\"city_info_table\">\n                <tbody>\n                    <tr>\n                        <td>Population: </td>\n                        <td>{selectedCity.data.population}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Cases: </td>\n                        <td>{selectedCity.cases}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Deaths: </td>\n                        <td>{selectedCity.deaths}</td>\n                    </tr>\n                    <tr>\n                        <td>Death Rate: </td>\n                        <td style={{color: 'red'}}>{((selectedCity.deaths/selectedCity.cases)*100).toFixed(1)}%</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    selectedCity: state.city,\n});\n\nexport default connect(mapStateToProps,null)(SelectedCityInfo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport CityListItems from './CityListItems';\nimport SelectedCityInfo from './SelectedCityInfo';\n\nconst SidePanel = ({cityData, selectedCity, selectedState}) => {\n    \n  let info = 'Top 5 Cities';\n  let close_button_style = 'none';\n  if(Object.keys(selectedCity).length > 0){\n    info = <SelectedCityInfo />\n    close_button_style = 'block';\n  }else{\n    info = <CityListItems cityData={cityData}/>;\n  }\n  return (\n      <aside id=\"side_panel\" >\n        {/* <div id=\"side_panel_close\" style={{display: close_button_style}} onClick={{}}>X</div> */}\n        {info}\n        <hr/>\n        <h5>Controls</h5>\n        <div className=\"custom-control custom-switch\">\n        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customSwitch1\" />\n        <label className=\"custom-control-label\" htmlFor=\"customSwitch1\">Heatmap</label>\n        </div>\n      </aside>\n    );\n}\nconst handleClose = () => {\n\n}\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(SidePanel);","import React from \"react\";\nimport \"./App.css\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport UnitedStatesTable from \"./UnitedStatesTable\";\nimport STATES from \"./constants/States\";\nimport Statistics from \"./components/Statistics\";\nimport Header from \"./components/Header\";\nimport Map from './components/Map';\nimport SidePanel from './components/SidePanel/SidePanel';\nimport { connect } from 'react-redux';\n\nimport USData from './constants/USData';\n\nclass App extends React.Component {\n  state = {\n    us_cases: 0,\n    us_deaths: 0,\n    us_recovered: 0,\n    cityData: [],\n    states: {},\n    lastUpdated: null,\n    maxCases: {},\n    maxDeaths: {},\n    minCases: {},\n    minDeaths: {},\n    selectedState: {},\n    isLoading: true\n  };\n\n  async componentDidMount() {\n    try {\n      //setInterval(async () =>  await this.fetchAllData(), 60 * 60 * 1000);\n      await this.fetchAllData();\n    } catch (err) {\n      // console.log(err);\n      // this.setState({\n      //   hasError: true\n      // });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval();\n  }\n\n  refreshData = () => {\n    this.setState({\n      isLoading: true\n    });\n    localStorage.clear();\n    this.fetchAllData();\n  };\n\n  fetchAllData = async () => {\n    // if (document.cookie === \"\") {\n    //   localStorage.clear();\n    // }\n    // //multiple calls of api might not be bad\n    // if (localStorage.getItem('covid_data') != null && localStorage.getItem('covid_data_updated') != null && localStorage.getItem('covid_data_recovered') != null) {\n    //   //check localStorage\n    //   let us_data = JSON.parse(localStorage.getItem('covid_data'));\n\n    //   //set US totals\n    //   this.setUSTotals(us_data);\n\n    //   //set state max and min totals\n    //   this.setMinAndMaxValues(us_data);\n\n    //   this.setState({\n    //     us_recovered: localStorage.getItem('covid_data_recovered'),\n    //     stateData: us_data,\n    //     lastUpdated: localStorage.getItem('covid_data_updated'),\n    //   });\n    // } else {\n    //   const res = await fetch('http://covid19-api.weedmark.systems/api/v1/stats?country=US')\n    //   const data = await res.json();\n    //   const us_stats = data.data.covid19Stats;\n\n    //   //set localStorage\n    //   localStorage.setItem('covid_data', JSON.stringify(this.groupData(us_stats)));\n    //   localStorage.setItem('covid_data_updated', data.data.lastChecked);\n\n    //   this.setState({\n    //     stateData: this.groupData(us_stats),\n    //     lastUpdated: data.data.lastChecked\n    //   });\n    // }\n    //https://covidtracking.com/api/states\n    //https://covid19-server.chrismichael.now.sh/api/v1/CasesInAllUSStates\n    // const res = await fetch(\n    //   \"http://covid19-api.weedmark.systems/api/v1/stats?country=US\"\n    // );\n    // const data = await res.json();\n    // const us_stats = data.data.covid19Stats;\n\n    const us_stats = USData.data;\n\n    //set localStorage\n    // localStorage.setItem(\n    //   \"covid_data\",\n    //   JSON.stringify(this.aggregateData(us_stats))\n    // );\n    //localStorage.setItem(\"covid_data_updated\", us_stats.data.lastChecked);\n    setTimeout(()=>{\n      this.setState({\n        cityData: us_stats.covid19Stats.sort((a, b) => (a.confirmed < b.confirmed) ? 1 : -1),\n        stateData: this.aggregateData(us_stats.covid19Stats),\n        lastUpdated: us_stats.lastChecked\n      });\n    },1000);\n  };\n\n  aggregateData = data => {\n    const map = data.reduce(\n      (acc, currentValue) => {\n        if (!acc.states[currentValue.province]) {\n          acc.states[currentValue.province] = [currentValue]\n        }\n        else {\n          acc.states[currentValue.province].push(currentValue)\n        }\n\n        if (currentValue.province.toLowerCase() === \"recovered\") {\n          acc.recovered = currentValue.recovered;\n        }\n\n        acc.deaths += currentValue.deaths;\n        acc.cases += currentValue.confirmed;\n        return acc;\n      },\n      { deaths: 0, cases: 0, recovered: 0 , states: {}}\n    );\n\n    this.setState({\n      us_cases: map.cases,\n      us_deaths: map.deaths,\n      us_recovered: map.recovered,\n      states: map.states,\n      isLoading: false\n    });\n\n    //set state max and min totals\n    this.setMinAndMaxValues(map.states);\n  };\n\n  setMinAndMaxValues = return_data => {\n    //find max confirmed cases\n    var max_confirmed = {\n      province: \"\",\n      count: 0\n    };\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].confirmed > max_confirmed[\"count\"]) {\n        max_confirmed[\"count\"] = return_data[i].confirmed;\n        max_confirmed[\"province\"] = return_data[i].province;\n      }\n    }\n    //find min confirmed cases\n    var min_confirmed = {\n      province: max_confirmed[\"province\"],\n      count: max_confirmed[\"count\"]\n    };\n\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].confirmed < min_confirmed[\"count\"]) {\n        min_confirmed[\"count\"] = return_data[i].confirmed;\n        min_confirmed[\"province\"] = return_data[i].province;\n      }\n    }\n\n    //find max deaths\n    var max_deaths = {\n      province: \"\",\n      count: 0\n    };\n\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].deaths > max_deaths[\"count\"]) {\n        max_deaths[\"count\"] = return_data[i].deaths;\n        max_deaths[\"province\"] = return_data[i].province;\n      }\n    }\n\n    //find min deaths\n    var min_deaths = {\n      province: max_deaths[\"province\"],\n      count: max_deaths[\"count\"]\n    };\n    for (var i = 0; i < return_data.length; i++) {\n      if (return_data[i].deaths < min_deaths[\"count\"]) {\n        min_deaths[\"count\"] = return_data[i].deaths;\n        min_deaths[\"province\"] = return_data[i].province;\n      }\n    }\n  };\n\n  render() {\n    const {\n      states,\n      isLoading,\n      us_cases,\n      us_deaths,\n      us_recovered,\n      cityData,\n    } = this.state;\n    let {\n      selectedCity,\n      selectedState\n    } = this.props;\n    \n    return (\n      <div className=\"d-flex w-100 h-100 p-3 mx-auto flex-column\">\n        <Header />\n        <main role=\"main\" className=\"inner cover\">\n          <div>\n            <SidePanel cityData={cityData} />\n            {isLoading ? (\n                <LoadingSpinner />\n              ) : (\n              <div id=\"main_contents\">\n                <Statistics\n                  cases={us_cases}\n                  deaths={us_deaths}\n                  recovered={us_recovered}\n                />\n                <Map cityData={cityData} states={states}/>\n                <UnitedStatesTable states={states} us_cases={us_cases} us_deaths={us_deaths} />\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}