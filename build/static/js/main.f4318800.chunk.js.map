{"version":3,"sources":["reducers/loading.js","store.js","reducers/state.js","reducers/city.js","LoadingSpinner.js","components/StatesTable.js","components/Statistics.js","components/Header.js","constants/States.js","components/Map.js","components/SidePanel/ListItems.js","components/SidePanel/SelectedCityInfo.js","components/SidePanel/SelectedStateInfo.js","components/SidePanel/SidePanel.js","App.js","serviceWorker.js","index.js"],"names":["initialState","statsLoading","sidepanelLoading","mapLoading","reducers","combineReducers","state","action","type","data","city","loading","store","createStore","LoadingSpinner","className","role","style","position","left","top","connect","dispatch","setSelectedState","removeSelectedCity","states","lastChecked","Date","stateData","Object","keys","map","key","cases","deaths","forEach","confirmed","province","lastUpdate","sort","a","b","filter","s","id","onClick","console","log","window","screen","width","document","querySelector","toString","replace","moment","startOf","fromNow","Statistics","useState","setLoading","setCases","setDeaths","recovered","setRecovered","useEffect","fetch","res","json","positive","death","fetchData","fontSize","color","Header","href","STATES","setSelectedCity","removeSelectedState","latitude","longitude","height","borderRadius","margin","minZoom","altitude","viewport","setViewport","markers","i","Cities","length","j","indexOf","push","mapboxApiAccessToken","mapStyle","onViewportChange","c","cursor","handleSelectedCity","data-tooltip","States","ListItems","limit","title","slice","selectedCity","population","toFixed","selectedState","handleClose","cityData","hasState","hasCity","info","App","lastUpdated","isLoading","refreshData","setState","localStorage","clear","fetchAllData","us_stats","USData","setTimeout","covid19Stats","aggregateData","reduce","acc","currentValue","this","clearInterval","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f4318800.chunk.js","sourcesContent":["/*\nThis reducer handles loading spinners\nfor updated components.\n*/\n\nconst initialState = {\n    statsLoading: true,\n    sidepanelLoading: true,\n    mapLoading: true\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_STATS_LOADING':\n            return !state.statsLoading;\n        case 'TOGGLE_SIDEPANEL_LOADING':\n            return !state.sidepanelLoading;\n        case 'TOGGLE_MAP_LOADING':\n            return !state.mapLoading;\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers } from 'redux';\n\nimport state from './reducers/state';\nimport city from './reducers/city';\nimport loading from './reducers/loading';\n\nconst reducers = combineReducers({\n  state,\n  city,\n  loading\n});\n\nconst store = createStore(reducers);\n\nexport default store;","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_STATE':\n            return action.data;\n        case 'REMOVE_STATE':\n            return {};\n        default:\n            return state\n    }\n};","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_CITY':\n            return action.data;\n        case 'REMOVE_CITY':\n            return {};\n        default:\n            return state\n    }\n};","import React from 'react';\n\nconst LoadingSpinner = () => {\n    const styling = {\n        position: 'absolute',\n        left: '50%',\n        top: '50%'\n    };\n    return (\n        <div className=\"spinner-border text-primary\" role=\"status\" style={styling}>\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from \"react\";\nimport moment from \"moment\";\nimport { connect } from 'react-redux';\n\n/*\nThis component is the table below the map that:\n - Shows state case and death totals\n - Allows you to select a state for more detailed info\n*/\n\nconst StatesTable = ({ states, lastChecked = new Date(), removeSelectedCity, setSelectedState}) => {\n  let stateData = Object.keys(states).map(key => {\n    let cases = 0;\n    let deaths = 0;\n\n    states[key].forEach(state => {\n      cases += state.confirmed;\n      deaths += state.deaths;\n    });\n\n    return { province: key, cases, deaths, lastUpdate: lastChecked };\n  }).sort((a, b) => (a.cases < b.cases) ? 1 : -1);\n\n  stateData = stateData.filter((s) => {\n    return (s.province !== \"Recovered\" &&\n    s.province !== \"Grand Princess\" &&\n    s.province !== \"Guam\" && \n    s.province !== \"Diamond Princess\" &&\n    s.province !== \"Northern Mariana Islands\" &&\n    s.province !== \"Virgin Islands\"\n     );\n  });\n\n  const handleSelectedState = s => {\n    console.log(window.screen.width);\n    if(window.screen.width <= 600){\n      if(document.querySelector('aside#side_panel') != null && document.querySelector('#city_list') != null){\n        document.querySelector('aside#side_panel').className = \"active\";\n        document.querySelector('#city_list').className = \"active\";\n      }\n    }\n\n    removeSelectedCity();\n    setSelectedState(s);\n  };\n\n  return (\n    <div className=\"table-responsive\">\n      <table id=\"state_list\" className=\"table table-striped table-sm\">\n        <thead>\n          <tr>\n            <th>State</th>\n            <th>Total Cases</th>\n            <th>Deaths</th>\n            <th>Last Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stateData.map(state => (\n            <tr key={state.province} onClick={() => {handleSelectedState(state)}}>\n              <td>{state.province}</td>\n              <td>{state.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n              <td>{state.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n              <td>\n                {moment(new Date(state.lastUpdate))\n                  .startOf(\"hour\")\n                  .fromNow()}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedState: data => dispatch({ type: 'SET_STATE', data }),\n    removeSelectedCity: () => dispatch({ type: 'REMOVE_CITY'})\n});\n\nexport default connect(null, mapDispatchToProps)(StatesTable);\n","import React, { useState, useEffect } from 'react';\nimport LoadingSpinner from './../LoadingSpinner';\n\nconst Statistics = () => {\n  const [loading, setLoading] = useState(true);\n  const [cases, setCases] = useState(0);\n  const [deaths, setDeaths] = useState(0);\n  const [recovered, setRecovered] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      try{\n        let res = await fetch('https://covidtracking.com/api/us');\n        let data = await res.json();\n        setLoading(false);\n        setCases(data[0].positive.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"));\n        setDeaths(data[0].death.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))\n        setRecovered(data[0].recovered.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\"))\n      }catch(e){\n        setCases('N/A');\n        setDeaths('N/A');\n        setRecovered('N/A');\n      }\n    }\n    fetchData();\n  },[]);\n\n  return (\n    <table id=\"summary_stats\">\n      <thead>\n        <tr>\n          <td>Cases</td>\n          <td>Deaths</td>\n          <td>Recoveries</td>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td style={{ fontSize: \"1.5em\" }}>{loading ? \"\" : cases}</td>\n          <td style={{ color: \"red\", fontSize: \"1.5em\" }}>{loading ? <LoadingSpinner /> : deaths}</td>\n          <td style={{ color: \"#5aff5a\", fontSize: \"1.5em\" }}>{loading ? \"\" : recovered}</td>\n        </tr>\n      </tbody>\n    </table>\n  );\n};\n\nexport default Statistics;\n","import React from \"react\";\n\nconst Header = () => {\n  return (\n    <header className=\"masthead mb-auto\">\n      <div className=\"inner\">\n        <h3 className=\"masthead-brand\">Covid-19 U.S</h3>\n        <nav className=\"nav nav-masthead justify-content-center\">\n          <a className=\"nav-link\" href=\"#\">\n            Contact\n          </a>\n        </nav>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n","const STATES = {\n    \"Alaska\": \"US-AK\",\n    \"Alabama\": \"US-AL\",\n    \"Arkansas\": \"US-AR\",\n    \"Arizona\": \"US-AZ\",\n    \"California\": \"US-CA\",\n    \"Colorado\": \"US-CO\",\n    \"Connecticut\": \"US-CT\",\n    \"Delaware\": \"US-DE\",\n    \"Florida\": \"US-FL\",\n    \"Georgia\": \"US-GA\",\n    \"Hawaii\": \"US-HI\",\n    \"Iowa\": \"US-IA\",\n    \"Idaho\": \"US-ID\",\n    \"Illinois\": \"US-IL\",\n    \"Indiana\": \"US-IN\",\n    \"Kansas\": \"US-KS\",\n    \"Kentucky\": \"US-KY\",\n    \"Louisiana\": \"US-LA\",\n    \"Massachusetts\": \"US-MA\",\n    \"Maryland\": \"US-MD\",\n    \"Maine\": \"US-ME\",\n    \"Michigan\": \"US-MI\",\n    \"Minnesota\": \"US-MN\",\n    \"Missouri\": \"US-MO\",\n    \"Mississippi\": \"US-MS\",\n    \"Montana\": \"US-MT\",\n    \"North Carolina\": \"US-NC\",\n    \"North Dakota\": \"US-ND\",\n    \"Nebraska\": \"US-NE\",\n    \"New Hampshire\": \"US-NH\",\n    \"New Jersey\": \"US-NJ\",\n    \"New Mexico\": \"US-NM\",\n    \"Nevada\": \"US-NV\",\n    \"New York\": \"US-NY\",\n    \"Ohio\": \"US-OH\",\n    \"Oklahoma\": \"US-OK\",\n    \"Oregon\": \"US-OR\",\n    \"Pennsylvania\": \"US-PA\",\n    \"Puerto Rico\": \"US-PR\",\n    \"Rhode Island\": \"US-RI\",\n    \"South Carolina\": \"US-SC\",\n    \"South Dakota\": \"US-SD\",\n    \"Tennessee\": \"US-TN\",\n    \"Texas\": \"US-TX\",\n    \"Utah\": \"US-UT\",\n    \"Virginia\": \"US-VA\",\n    \"Vermont\": \"US-VT\",\n    \"Washington\": \"US-WA\",\n    \"Wisconsin\": \"US-WI\",\n    \"West Virginia\": \"US-WV\",\n    \"Wyoming\": \"US-WY\"\n  };\n\n  export default STATES;","import React, { useState } from 'react';\nimport ReactMapGL, {Source, Layer, Marker} from 'react-map-gl';\nimport Cities from './../constants/Cities.json';\nimport States from './../constants/States';\nimport * as d3 from 'd3';\nimport { connect } from 'react-redux';\n\n/*\nThis component is the map and handles all of the \nfeatures and its events\n*/\n\nconst Map = ({states, setSelectedCity, removeSelectedState}) => {\n  const [ viewport, setViewport ] = useState({\n    latitude: 38.219860,\n    longitude: -96.500965,\n    height: '80vh',\n    width: '100%',\n    borderRadius: 5,\n    margin: '5% 0%',\n    minZoom: 3,\n    altitude: 4\n  });\n\n  let markers = [];\n  for(var i = 0; i < Cities.length; i++){\n    var state = Cities[i].state;\n    for(var j = 0; j < states[state].length; j++){\n      if(states[state][j].city.indexOf(Cities[i].city) != -1 &&\n         states[state][j].province === Cities[i].state &&\n         states[state][j].confirmed != 0){\n        markers.push({\n          cases: states[state][j].confirmed,\n          deaths: states[state][j].deaths,\n          data: Cities[i]\n        });\n        break;\n      }\n    }\n  }\n  const handleSelectedCity = c => {\n    if(window.screen.width <= 600){\n      if(document.querySelector('aside#side_panel') != null){\n        document.querySelector('aside#side_panel').className = \"active\";\n      }\n    }\n\n    removeSelectedState();\n    setSelectedCity(c);\n  };\n  // var markerColor = d3.scaleQuantize()\n  //   .domain([1, 1000])\n  //   .range([\"yellow\", \"red\"]);\n    return (\n      <div style={{margin: 10}}>\n        <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken='pk.eyJ1IjoiZ2x2YWxkZXoiLCJhIjoiY2s4ZGVsamIxMHRqazNsb3d1aDN6bmNvMCJ9.AzXsa9tQkXmdzyXaDUdqJw'\n        mapStyle=\"mapbox://styles/glvaldez/ck8df394y0hn51imqb0n3yu9v\"\n        onViewportChange={viewport => {\n          setViewport(viewport)\n        }}\n        >\n          {/* <Marker latitude={40.7127837} longitude={-74.0059413}>\n            <p style={{color: 'red'}}>.</p>\n          </Marker> */}\n\n        {markers.map((c,i) => {\n          return (\n            <Marker latitude={c.data.latitude} longitude={c.data.longitude} key={i}>\n               <div style={{color: 'red', fontSize: 20, cursor: 'pointer', top: -20, position: 'absolute'}} onClick={() => {handleSelectedCity(c)}} className=\"map_marker\" data-tooltip={c.data.city + \",\" + States[c.data.state].replace('US-','')}>.</div>\n            </Marker>\n          )\n        })}\n        </ReactMapGL>\n      </div>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedCity: data => dispatch({ type: 'SET_CITY', data }),\n  removeSelectedState: () => dispatch({ type: 'REMOVE_STATE'})\n});\n\nexport default connect(null, mapDispatchToProps)(Map);\n","import React from 'react';\nimport States from '../../constants/States';\n\nconst ListItems = ({data, title, limit}) => {\n    return (\n        <div>\n            <table id=\"city_list\">\n              <thead>\n                <tr>\n                  <td className=\"city\"><u>City</u></td>\n                  <td><u>Cases</u></td>\n                  <td><u>Deaths</u></td>\n                </tr>\n              </thead>\n              <tbody>\n                {data.slice(0,(typeof limit === \"undefined\" ? data.length : limit)).map((c,i) => (\n                  <tr key={i}>\n                    <td className=\"city\">{(c.city !== \"\" && c.city.indexOf('Unassigned') == -1) ? c.city + ', ' + States[c.province].replace('US-','') : \"N/A\"}</td>\n                    <td>{c.confirmed.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    <td>{c.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ListItems;","import React from 'react';\nimport States from './../../constants/States';\nimport { connect } from 'react-redux';\n\nconst SelectedCityInfo = ({selectedCity}) => {\n    return (\n        <div className=\"summary\">\n            <h3>{selectedCity.data.city + \", \" + States[selectedCity.data.state].replace('US-','')}</h3>\n            <table id=\"sidebar_info_table\">\n                <tbody>\n                    <tr>\n                        <td>Population: </td>\n                        <td>{selectedCity.data.population.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Cases: </td>\n                        <td>{selectedCity.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Deaths: </td>\n                        <td>{selectedCity.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    </tr>\n                    <tr>\n                        <td>Death Rate: </td>\n                        <td style={{color: 'red'}}>{((selectedCity.deaths/selectedCity.cases)*100).toFixed(1)}%</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    selectedCity: state.city,\n});\n\nexport default connect(mapStateToProps,null)(SelectedCityInfo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ListItems from './ListItems';\n\nconst SelectedStateInfo = ({selectedState, states}) => {\n    return (\n        <div>\n            <div className=\"summary\">\n                <h3>{selectedState.province}</h3>\n                <table id=\"sidebar_info_table\">\n                    <tbody>\n                        <tr>\n                            <td>Population: </td>\n                            <td>N/A</td>\n                        </tr>\n                        <tr>\n                            <td>Total Cases: </td>\n                            <td>{selectedState.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                        </tr>\n                        <tr>\n                            <td>Total Deaths: </td>\n                            <td>{selectedState.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                        </tr>\n                        <tr>\n                            <td>Death Rate: </td>\n                            <td style={{color: 'red'}}>{((selectedState.deaths/selectedState.cases)*100).toFixed(1)}%</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <hr/>\n            <ListItems data={states[selectedState.province]} />\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    selectedState: state.state,\n});\n\nexport default connect(mapStateToProps,null)(SelectedStateInfo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ListItems from './ListItems';\nimport SelectedCityInfo from './SelectedCityInfo';\nimport SelectedStateInfo from './SelectedStateInfo';\nimport Controls from './Controls';\n\nconst SidePanel = ({cityData, selectedCity, selectedState, states}) => {\n    \n  let hasState = Object.keys(selectedState).length > 0;\n  let hasCity = Object.keys(selectedCity).length > 0;\n\n  let info = <ListItems data={cityData} limit={5}/>;\n\n  if(hasCity){\n    info = <SelectedCityInfo />\n    //close_button_style = 'block';\n  }else if(hasState){\n    info = <SelectedStateInfo states={states}/>;\n  }\n  return (\n      <aside id=\"side_panel\" >\n        <div id=\"side_panel_close\" onClick={() => {handleClose()}}>X</div>\n        {info}\n        <hr/>\n        {/* <Controls /> */}\n      </aside>\n    );\n}\n\nconst handleClose = () => {\n  if(document.querySelector('aside#side_panel') != null){\n    document.querySelector('aside#side_panel').className = \"closed\";\n  }\n};\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(SidePanel);","import React from \"react\";\nimport \"./App.css\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport StatesTable from \"./components/StatesTable\";\nimport Statistics from \"./components/Statistics\";\nimport Header from \"./components/Header\";\nimport Map from './components/Map';\nimport SidePanel from './components/SidePanel/SidePanel';\nimport { connect } from 'react-redux';\n\nimport USData from './constants/USData';\n\n//API for new data http://covid19-api.weedmark.systems/api/v1/stats?country=US\nclass App extends React.Component {\n  state = {\n    cityData: [],\n    states: {},\n    lastUpdated: null,\n    selectedState: {},\n    isLoading: true\n  };\n\n  async componentDidMount() {\n    try {\n      //setInterval(async () =>  await this.fetchAllData(), 60 * 60 * 1000);\n      await this.fetchAllData();\n    } catch (err) {\n      // console.log(err);\n      // this.setState({\n      //   hasError: true\n      // });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval();\n  }\n\n  refreshData = () => {\n    this.setState({\n      isLoading: true\n    });\n    localStorage.clear();\n    this.fetchAllData();\n  };\n\n  fetchAllData = async () => {\n    const us_stats = USData.data;\n\n    setTimeout(()=>{\n      this.setState({\n        cityData: us_stats.covid19Stats.sort((a, b) => (a.confirmed < b.confirmed) ? 1 : -1),\n        stateData: this.aggregateData(us_stats.covid19Stats),\n        lastUpdated: us_stats.lastChecked\n      });\n    },1000);\n  };\n\n  aggregateData = data => {\n    const map = data.reduce(\n      (acc, currentValue) => {\n        if (!acc.states[currentValue.province]) {\n          acc.states[currentValue.province] = [currentValue]\n        }\n        else {\n          acc.states[currentValue.province].push(currentValue)\n        }\n        return acc;\n      },\n      { states: {}}\n    );\n\n    this.setState({\n      states: map.states,\n      isLoading: false\n    });\n  };\n\n  render() {\n    const {\n      states,\n      isLoading,\n      cityData,\n    } = this.state;\n    \n    return (\n      <div className=\"d-flex w-100 h-100 p-3 mx-auto flex-column\">\n        <Header />\n        <main role=\"main\" className=\"inner cover\">\n          <div>\n            <SidePanel cityData={cityData} states={states}/>\n            {isLoading ? (\n                <LoadingSpinner />\n              ) : (\n              <div id=\"main_contents\">\n                <Statistics />\n                <Map cityData={cityData} states={states}/>\n                <StatesTable states={states} />\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}