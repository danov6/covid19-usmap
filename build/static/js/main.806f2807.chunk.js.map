{"version":3,"sources":["reducers/loading.js","store.js","reducers/state.js","reducers/city.js","LoadingSpinner.js","components/StatesTable.js","components/Statistics.js","components/Header/ContactModal.js","components/Header/Header.js","constants/States.js","components/Map.js","components/SidePanel/ListItems.js","components/SidePanel/SelectedCityInfo.js","constants/Population.js","components/SidePanel/SelectedStateInfo.js","components/SidePanel/SidePanel.js","App.js","serviceWorker.js","index.js"],"names":["initialState","statsLoading","sidepanelLoading","mapLoading","reducers","combineReducers","state","action","type","data","city","loading","store","createStore","LoadingSpinner","className","role","style","position","left","top","connect","dispatch","setSelectedState","removeSelectedCity","states","lastChecked","Date","useState","sortBy","setSortBy","stateData","Object","keys","map","key","cases","deaths","forEach","confirmed","province","lastUpdate","filter","s","sort","a","b","id","onClick","console","log","window","screen","width","document","querySelector","toString","replace","moment","startOf","fromNow","Statistics","setLoading","setCases","setDeaths","recovered","setRecovered","totalTestResults","setTotalTestResults","negativeResults","setNegativeResults","useEffect","fetch","res","json","positive","death","negative","fetchData","fontSize","color","Number","toFixed","drawer","drawer_button","toggleStatsDrawer","src","process","ContactModal","tabIndex","backgroundColor","data-dismiss","aria-label","aria-hidden","name","placeholder","Header","data-toggle","data-target","cursor","STATES","setSelectedCity","removeSelectedState","latitude","longitude","height","borderRadius","margin","minZoom","altitude","viewport","setViewport","markers","i","Cities","length","j","indexOf","push","mapboxApiAccessToken","mapStyle","onViewportChange","c","handleSelectedCity","data-tooltip","States","ListItems","limit","title","slice","selectedCity","population","POPULATION","selectedState","textAlign","target","href","Population","handleClose","cityData","hasState","hasCity","info","App","lastUpdated","isLoading","refreshData","setState","localStorage","clear","fetchAllData","us_stats","USData","setTimeout","covid19Stats","aggregateData","reduce","acc","currentValue","this","clearInterval","React","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.806f2807.chunk.js","sourcesContent":["/*\nThis reducer handles loading spinners\nfor updated components.\n*/\n\nconst initialState = {\n    statsLoading: true,\n    sidepanelLoading: true,\n    mapLoading: true\n};\n\nexport default (state = initialState, action) => {\n    switch (action.type) {\n        case 'TOGGLE_STATS_LOADING':\n            return !state.statsLoading;\n        case 'TOGGLE_SIDEPANEL_LOADING':\n            return !state.sidepanelLoading;\n        case 'TOGGLE_MAP_LOADING':\n            return !state.mapLoading;\n        default:\n            return state\n    }\n}\n","import { createStore, combineReducers } from 'redux';\n\nimport state from './reducers/state';\nimport city from './reducers/city';\nimport loading from './reducers/loading';\n\nconst reducers = combineReducers({\n  state,\n  city,\n  loading\n});\n\nconst store = createStore(reducers);\n\nexport default store;","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_STATE':\n            return action.data;\n        case 'REMOVE_STATE':\n            return {};\n        default:\n            return state\n    }\n};","export default (state={}, action) => {\n    switch (action.type) {\n        case 'SET_CITY':\n            return action.data;\n        case 'REMOVE_CITY':\n            return {};\n        default:\n            return state\n    }\n};","import React from 'react';\n\nconst LoadingSpinner = () => {\n    const styling = {\n        position: 'absolute',\n        left: '50%',\n        top: '50%'\n    };\n    return (\n        <div className=\"spinner-border text-primary\" role=\"status\" style={styling}>\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { connect } from 'react-redux';\n\n/*\nThis component is the table below the map that:\n - Shows state case and death totals\n - Allows you to select a state for more detailed info\n*/\n\nconst StatesTable = ({ states, lastChecked = new Date(), removeSelectedCity, setSelectedState}) => {\n  const [ sortBy, setSortBy ] = useState('cases');\n  let stateData = Object.keys(states).map(key => {\n    let cases = 0;\n    let deaths = 0;\n\n    states[key].forEach(state => {\n      cases += state.confirmed;\n      deaths += state.deaths;\n    });\n\n    return { province: key, cases, deaths, lastUpdate: lastChecked };\n  });\n\n  //filter out non states for time being\n  stateData = stateData.filter((s) => {\n    return (s.province !== 'Recovered' &&\n    s.province !== 'Grand Princess' &&\n    s.province !== 'Guam' && \n    s.province !== 'Diamond Princess' &&\n    s.province !== 'Northern Mariana Islands' &&\n    s.province !== 'Virgin Islands'\n     );\n  });\n\n  //handle sorting\n  if(sortBy === 'province'){\n    stateData = stateData.sort((a, b) => (a[sortBy] > b[sortBy]) ? 1 : -1);\n  }else{\n    stateData = stateData.sort((a, b) => (a[sortBy] < b[sortBy]) ? 1 : -1);\n  }\n\n  const handleSelectedState = s => {\n    console.log(window.screen.width);\n    if(window.screen.width <= 600){\n      if(document.querySelector('aside#side_panel') != null && document.querySelector('#city_list') != null){\n        document.querySelector('aside#side_panel').className = 'active';\n        document.querySelector('#city_list').className = 'active';\n      }\n    }\n\n    removeSelectedCity();\n    setSelectedState(s);\n  };\n\n  return (\n    <div className='table-responsive'>\n      <table id='state_list' className='table table-striped table-sm'>\n        <thead>\n          <tr>\n            <th onClick={()=> {setSortBy('province')}} className=\"select\">State</th>\n            <th onClick={()=> {setSortBy('cases')}} className=\"select\">Total Cases</th>\n            <th onClick={()=> {setSortBy('deaths')}} className=\"select\">Deaths</th>\n            <th>Last Updated</th>\n          </tr>\n        </thead>\n        <tbody>\n          {stateData.map(state => (\n            <tr key={state.province} onClick={() => {handleSelectedState(state)}}>\n              <td>{state.province}</td>\n              <td>{state.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}</td>\n              <td>{state.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}</td>\n              <td>\n                {moment(new Date(state.lastUpdate))\n                  .startOf('hour')\n                  .fromNow()}\n              </td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst mapDispatchToProps = dispatch => ({\n    setSelectedState: data => dispatch({ type: 'SET_STATE', data }),\n    removeSelectedCity: () => dispatch({ type: 'REMOVE_CITY'})\n});\n\nexport default connect(null, mapDispatchToProps)(StatesTable);\n","import React, { useState, useEffect } from 'react';\nimport LoadingSpinner from './../LoadingSpinner';\n\nconst Statistics = () => {\n  const [loading, setLoading] = useState(true);\n  const [cases, setCases] = useState(0);\n  const [deaths, setDeaths] = useState(0);\n  const [recovered, setRecovered] = useState(0);\n\n  const [totalTestResults, setTotalTestResults] = useState(0);\n  const [negativeResults, setNegativeResults] = useState(0);\n  //const [pendingResults, setPendingResults] = useState(0);\n\n  useEffect(() => {\n    async function fetchData() {\n      try{\n        let res = await fetch('https://covidtracking.com/api/us');\n        let data = await res.json();\n        setLoading(false);\n        setCases(data[0].positive);\n        setDeaths(data[0].death);\n        setRecovered(data[0].recovered);\n        setTotalTestResults(data[0].totalTestResults);\n        setNegativeResults(data[0].negative);\n      }catch(e){}\n    }\n    fetchData();\n  },[]);\n\n  const toggleStatsDrawer = () => {\n    let drawer = document.querySelector('#summary_stats_hidden');\n    let drawer_button = document.querySelector('#drawer_button');\n    if(drawer){\n      drawer.className == \"\" ?\n      drawer.className = \"stats_drawer_active\" :\n      drawer.className = \"\";\n    }\n    if(drawer_button){\n      drawer_button.className == \"\" ?\n      drawer_button.className = \"rotate\" :\n      drawer_button.className = \"\";\n    }\n  };\n\n  return (\n    <div id=\"summary_stats\">\n      <table style={{width: '100%'}}>\n        <thead>\n          <tr>\n            <td>Cases</td>\n            <td>Deaths</td>\n            <td>Recoveries</td>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td style={{ fontSize: \"1.5em\" }}>{loading ? \"\" : cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n            <td style={{ color: \"red\", fontSize: \"1.5em\" }}>{loading ? <LoadingSpinner /> : deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n            <td style={{ color: \"#5aff5a\", fontSize: \"1.5em\" }}>{loading ? \"\" : recovered.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n          </tr>\n          <tr>\n            <td style={{fontSize: \"0.6em\" }}>% of closed cases</td>\n            <td style={{ color: \"red\", fontSize: \"0.6em\" }}>{Number((deaths/(deaths+recovered))*100).toFixed(1)}%</td>\n            <td style={{ color: \"#5aff5a\", fontSize: \"0.6em\" }}>{Number((recovered/(deaths+recovered))*100).toFixed(1)}%</td>\n          </tr>\n        </tbody>\n      </table>\n      <div id=\"summary_stats_hidden\">\n        <table style={{width: '100%'}}>\n          <thead>\n            <tr>\n              <td style={{fontSize: '2vw'}}>Total Patients Tested</td>\n              <td style={{fontSize: '2vw'}}>Positive</td>\n              <td style={{fontSize: '2vw'}}>Negative</td>\n            </tr>\n          </thead>\n          <tbody>\n            <tr>\n              <td style={{ fontSize: \"1.5em\" }}>{loading ? \"\" : totalTestResults.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n              <td style={{ color: \"red\", fontSize: \"1.5em\" }}>{loading ? <LoadingSpinner /> : cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n              <td style={{ color: \"#5aff5a\", fontSize: \"1.5em\" }}>{loading ? \"\" : negativeResults.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n            </tr>\n            <tr>\n              <td style={{fontSize: \"0.6em\" }}>% of overall tested</td>\n              <td style={{ color: \"red\", fontSize: \"0.6em\" }}>{Number((cases/totalTestResults)*100).toFixed(1)}%</td>\n              <td style={{ color: \"#5aff5a\", fontSize: \"0.6em\" }}>{Number((negativeResults/totalTestResults)*100).toFixed(1)}%</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div>\n        <button id=\"stats_expand_button\" onClick={()=>{toggleStatsDrawer()}}>\n          <img src={process.env.PUBLIC_URL + '/images/down-arrow-white.png'} id=\"drawer_button\"/>\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Statistics;\n","import React from \"react\";\n\nconst ContactModal = () => {\n  return (\n    <div className=\"modal\" tabIndex=\"-1\" role=\"dialog\" id=\"contact_modal\" style={{backgroundColor: '#2d2d2d'}}>\n        <div className=\"modal-dialog\" role=\"document\">\n            <div className=\"modal-content\">\n            <div className=\"modal-header\">\n                <h5 className=\"modal-title\" style={{color: '#fff'}}>Let's get in touch!</h5>\n                <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                <span aria-hidden=\"true\">&times;</span>\n                </button>\n            </div>\n            <div className=\"modal-body\">\n                <p style={{color: '#fff'}}>We appreciate all feedback.</p>\n                <form>\n                    <input name=\"name\" type=\"text\" placeholder=\"Full name\"/>\n                    <input name=\"email\" type=\"email\" placeholder=\"Email\"/>\n                    <textarea name=\"message\" placeholder=\"Write a message..\"/>\n                </form>\n            </div>\n            <div className=\"modal-footer\">\n                <button type=\"button\" className=\"btn btn-primary\">Submit</button>\n                <button type=\"button\" className=\"btn btn-secondary\" data-dismiss=\"modal\">Close</button>\n            </div>\n            </div>\n        </div>\n    </div>\n  );\n};\n\nexport default ContactModal;","import React from \"react\";\nimport ContactModal from './ContactModal';\n\nconst Header = () => {\n  return (\n    <header className=\"masthead mb-auto\">\n      <div className=\"inner\">\n        <h3 className=\"masthead-brand\">Covid-19 U.S</h3>\n        <nav className=\"nav nav-masthead justify-content-center\">\n          <a className=\"nav-link\" data-toggle=\"modal\" data-target=\"#contact_modal\" style={{cursor: 'pointer'}}>\n            Contact\n          </a>\n        </nav>\n      </div>\n      <ContactModal />\n    </header>\n  );\n};\n\nexport default Header;\n","const STATES = {\n    \"Alaska\": \"AK\",\n    \"Alabama\": \"AL\",\n    \"Arkansas\": \"AR\",\n    \"Arizona\": \"AZ\",\n    \"California\": \"CA\",\n    \"Colorado\": \"CO\",\n    \"Connecticut\": \"CT\",\n    \"Delaware\": \"DE\",\n    \"District of Columbia\": \"DC\",\n    \"Florida\": \"FL\",\n    \"Georgia\": \"GA\",\n    \"Hawaii\": \"HI\",\n    \"Iowa\": \"IA\",\n    \"Idaho\": \"ID\",\n    \"Illinois\": \"IL\",\n    \"Indiana\": \"IN\",\n    \"Kansas\": \"KS\",\n    \"Kentucky\": \"KY\",\n    \"Louisiana\": \"LA\",\n    \"Massachusetts\": \"MA\",\n    \"Maryland\": \"MD\",\n    \"Maine\": \"ME\",\n    \"Michigan\": \"MI\",\n    \"Minnesota\": \"MN\",\n    \"Missouri\": \"MO\",\n    \"Mississippi\": \"MS\",\n    \"Montana\": \"MT\",\n    \"North Carolina\": \"NC\",\n    \"North Dakota\": \"ND\",\n    \"Nebraska\": \"NE\",\n    \"New Hampshire\": \"NH\",\n    \"New Jersey\": \"NJ\",\n    \"New Mexico\": \"NM\",\n    \"Nevada\": \"NV\",\n    \"New York\": \"NY\",\n    \"Ohio\": \"OH\",\n    \"Oklahoma\": \"OK\",\n    \"Oregon\": \"OR\",\n    \"Pennsylvania\": \"PA\",\n    \"Puerto Rico\": \"PR\",\n    \"Rhode Island\": \"RI\",\n    \"South Carolina\": \"SC\",\n    \"South Dakota\": \"SD\",\n    \"Tennessee\": \"TN\",\n    \"Texas\": \"TX\",\n    \"Utah\": \"UT\",\n    \"Virginia\": \"VA\",\n    \"Vermont\": \"VT\",\n    \"Washington\": \"WA\",\n    \"Wisconsin\": \"WI\",\n    \"West Virginia\": \"WV\",\n    \"Wyoming\": \"WY\"\n  };\n\n  export default STATES;","import React, { useState } from 'react';\nimport ReactMapGL, {Source, Layer, Marker} from 'react-map-gl';\nimport Cities from './../constants/Cities.json';\nimport States from './../constants/States';\nimport * as d3 from 'd3';\nimport { connect } from 'react-redux';\n\n/*\nThis component is the map and handles all of the \nfeatures and its events\n*/\n\nconst Map = ({states, setSelectedCity, removeSelectedState}) => {\n  const [ viewport, setViewport ] = useState({\n    latitude: 38.219860,\n    longitude: -96.500965,\n    height: '80vh',\n    width: '100%',\n    borderRadius: 5,\n    margin: '5% 0%',\n    minZoom: 3,\n    altitude: 4\n  });\n\n  let markers = [];\n  for(var i = 0; i < Cities.length; i++){\n    var state = Cities[i].state;\n    for(var j = 0; j < states[state].length; j++){\n      if(states[state][j].city.indexOf(Cities[i].city) != -1 &&\n         states[state][j].province === Cities[i].state &&\n         states[state][j].confirmed != 0){\n        markers.push({\n          cases: states[state][j].confirmed,\n          deaths: states[state][j].deaths,\n          data: Cities[i]\n        });\n        break;\n      }\n    }\n  }\n  const handleSelectedCity = c => {\n    if(window.screen.width <= 600){\n      if(document.querySelector('aside#side_panel') != null){\n        document.querySelector('aside#side_panel').className = \"active\";\n      }\n    }\n\n    removeSelectedState();\n    setSelectedCity(c);\n  };\n  // var markerColor = d3.scaleQuantize()\n  //   .domain([1, 1000])\n  //   .range([\"yellow\", \"red\"]);\n    return (\n      <div id=\"map\">\n        <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken='pk.eyJ1IjoiZ2x2YWxkZXoiLCJhIjoiY2s4ZGVsamIxMHRqazNsb3d1aDN6bmNvMCJ9.AzXsa9tQkXmdzyXaDUdqJw'\n        mapStyle=\"mapbox://styles/glvaldez/ck8df394y0hn51imqb0n3yu9v\"\n        onViewportChange={viewport => {\n          setViewport(viewport)\n        }}\n        >\n          {/* <Marker latitude={40.7127837} longitude={-74.0059413}>\n            <p style={{color: 'red'}}>.</p>\n          </Marker> */}\n\n        {markers.map((c,i) => {\n          return (\n            <Marker latitude={c.data.latitude} longitude={c.data.longitude} key={i}>\n               <div style={{color: 'red', fontSize: 20, cursor: 'pointer', top: -20, position: 'absolute'}} onClick={() => {handleSelectedCity(c)}} className=\"map_marker\" data-tooltip={c.data.city + \",\" + States[c.data.state].replace('US-','')}>.</div>\n            </Marker>\n          )\n        })}\n        </ReactMapGL>\n      </div>\n    );\n}\n\nconst mapDispatchToProps = dispatch => ({\n  setSelectedCity: data => dispatch({ type: 'SET_CITY', data }),\n  removeSelectedState: () => dispatch({ type: 'REMOVE_STATE'})\n});\n\nexport default connect(null, mapDispatchToProps)(Map);\n","import React, { useState } from 'react';\nimport States from '../../constants/States';\n\nconst ListItems = ({data, title, limit}) => {\n    const [ sortBy, setSortBy ] = useState('confirmed')\n\n    //handle sorting\n    if(sortBy === 'city'){\n      data = data.sort((a, b) => (a[sortBy] > b[sortBy]) ? 1 : -1);\n    }else{\n      data = data.sort((a, b) => (a[sortBy] < b[sortBy]) ? 1 : -1);\n    }\n    // onClick={() => {setSortBy('city')}}\n    // onClick={() => {setSortBy('confirmed')}}\n    // onClick={() => {setSortBy('deaths')}}\n\n    return (\n        <div>\n            <table id=\"city_list\">\n              <thead>\n                <tr>\n                  <th className=\"city select\"><u>City</u></th>\n                  <th className=\"select\"><u>Cases</u></th>\n                  <th className=\"select\"><u>Deaths</u></th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.slice(0,(typeof limit === \"undefined\" ? data.length : limit)).map((c,i) => (\n                  <tr key={i}>\n                    <td className=\"city\">{(c.city !== \"\" && c.city.indexOf('Unassigned') == -1) ? c.city + ', ' + States[c.province] : <i>N/A</i>}</td>\n                    <td>{c.confirmed.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    <td>{c.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n        </div>\n    );\n}\n\nexport default ListItems;","import React from 'react';\nimport States from './../../constants/States';\nimport { connect } from 'react-redux';\n\nconst SelectedCityInfo = ({selectedCity}) => {\n    return (\n        <div className=\"summary\">\n            <h3>{selectedCity.data.city + \", \" + States[selectedCity.data.state]}</h3>\n            <table id=\"sidebar_info_table\">\n                <tbody>\n                    <tr>\n                        <td>Population: </td>\n                        <td>{selectedCity.data.population.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Cases: </td>\n                        <td>{selectedCity.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    </tr>\n                    <tr>\n                        <td>Total Deaths: </td>\n                        <td>{selectedCity.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                    </tr>\n                    <tr>\n                        <td>Death Rate: </td>\n                        <td style={{color: 'red'}}>{((selectedCity.deaths/selectedCity.cases)*100).toFixed(1)}%</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    selectedCity: state.city,\n});\n\nexport default connect(mapStateToProps,null)(SelectedCityInfo);","const POPULATION = {\n    \"Alaska\": \"731545\",\n    \"Alabama\": \"4903185\",\n    \"Arkansas\": \"3017825\",\n    \"Arizona\": \"7278717\",\n    \"California\": \"39512223\",\n    \"Colorado\": \"5758736\",\n    \"Connecticut\": \"3565287\",\n    \"Delaware\": \"973764\",\n    \"District of Columbia\": \"705749\",\n    \"Florida\": \"21477737\",\n    \"Georgia\": \"10617423\",\n    \"Hawaii\": \"1415872\",\n    \"Iowa\": \"3155070\",\n    \"Idaho\": \"1787065\",\n    \"Illinois\": \"12671821\",\n    \"Indiana\": \"6732219\",\n    \"Kansas\": \"2913314\",\n    \"Kentucky\": \"4467673\",\n    \"Louisiana\": \"4,648,794\",\n    \"Massachusetts\": \"6949503\",\n    \"Maryland\": \"6045680\",\n    \"Maine\": \"1344212\",\n    \"Michigan\": \"9986857\",\n    \"Minnesota\": \"5639632\",\n    \"Missouri\": \"6137428\",\n    \"Mississippi\": \"2976149\",\n    \"Montana\": \"1068778\",\n    \"North Carolina\": \"10488084\",\n    \"North Dakota\": \"762062\",\n    \"Nebraska\": \"1934408\",\n    \"New Hampshire\": \"1359711\",\n    \"New Jersey\": \"8882190\",\n    \"New Mexico\": \"2096829\",\n    \"Nevada\": \"3080156\",\n    \"New York\": \"19453561\",\n    \"Ohio\": \"11689100\",\n    \"Oklahoma\": \"3956971\",\n    \"Oregon\": \"4217737\",\n    \"Pennsylvania\": \"12801989\",\n    \"Puerto Rico\": \"3193694\",\n    \"Rhode Island\": \"1059361\",\n    \"South Carolina\": \"5148714\",\n    \"South Dakota\": \"884659\",\n    \"Tennessee\": \"6833174\",\n    \"Texas\": \"28995881\",\n    \"Utah\": \"3205958\",\n    \"Virginia\": \"8535519\",\n    \"Vermont\": \"623989\",\n    \"Washington\": \"7614893\",\n    \"Wisconsin\": \"5822434\",\n    \"West Virginia\": \"1792147\",\n    \"Wyoming\": \"578759\"\n  };\n\n  export default POPULATION;","import React from 'react';\nimport { connect } from 'react-redux';\nimport ListItems from './ListItems';\nimport Population from './../../constants/Population';\n\nconst SelectedStateInfo = ({selectedState, states}) => {\n    return (\n        <div>\n            <div className=\"summary\">\n                <h3>{selectedState.province}</h3>\n                <a style={{fontSize: '0.6em', textAlign: 'center'}} target=\"_blank\" href=\"https://en.wikipedia.org/wiki/List_of_states_and_territories_of_the_United_States_by_population#State_rankings\">*U.S Census Bureau estimate as of 07/01/19</a>\n                <table id=\"sidebar_info_table\">\n                    <tbody>\n                        <tr>\n                            <td>Population: </td>\n                            <td>*{Population[selectedState.province].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                        </tr>\n                        <tr>\n                            <td>Total Cases: </td>\n                            <td>&nbsp;&nbsp;{selectedState.cases.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                        </tr>\n                        <tr>\n                            <td>Total Deaths: </td>\n                            <td>&nbsp;&nbsp;{selectedState.deaths.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</td>\n                        </tr>\n                        <tr>\n                            <td>Death Rate: </td>\n                            <td style={{color: 'red'}}>&nbsp;&nbsp;{((selectedState.deaths/selectedState.cases)*100).toFixed(1)}%</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>\n            <hr/>\n            <ListItems data={states[selectedState.province]} />\n        </div>\n    );\n}\n\nconst mapStateToProps = state => ({\n    selectedState: state.state,\n});\n\nexport default connect(mapStateToProps,null)(SelectedStateInfo);","import React from 'react';\nimport { connect } from 'react-redux';\nimport ListItems from './ListItems';\nimport SelectedCityInfo from './SelectedCityInfo';\nimport SelectedStateInfo from './SelectedStateInfo';\nimport Controls from './Controls';\n\nconst SidePanel = ({cityData, selectedCity, selectedState, states}) => {\n    \n  let hasState = Object.keys(selectedState).length > 0;\n  let hasCity = Object.keys(selectedCity).length > 0;\n\n  let info = <ListItems data={cityData} limit={5}/>;\n\n  if(hasCity){\n    info = <SelectedCityInfo />\n    //close_button_style = 'block';\n  }else if(hasState){\n    info = <SelectedStateInfo states={states}/>;\n  }\n  return (\n      <aside id=\"side_panel\" >\n        <div id=\"side_panel_close\" onClick={() => {handleClose()}}>X</div>\n        {info}\n        <hr/>\n        {/* <Controls /> */}\n      </aside>\n    );\n}\n\nconst handleClose = () => {\n  if(document.querySelector('aside#side_panel') != null){\n    document.querySelector('aside#side_panel').className = \"closed\";\n  }\n};\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(SidePanel);","import React from \"react\";\nimport \"./App.css\";\nimport LoadingSpinner from \"./LoadingSpinner\";\nimport StatesTable from \"./components/StatesTable\";\nimport Statistics from \"./components/Statistics\";\nimport Header from \"./components/Header/Header\";\nimport Map from './components/Map';\nimport SidePanel from './components/SidePanel/SidePanel';\nimport { connect } from 'react-redux';\n\nimport USData from './constants/USData';\n\n//API for new data http://covid19-api.weedmark.systems/api/v1/stats?country=US\nclass App extends React.Component {\n  state = {\n    cityData: [],\n    states: {},\n    lastUpdated: null,\n    selectedState: {},\n    isLoading: true\n  };\n\n  async componentDidMount() {\n    try {\n      //setInterval(async () =>  await this.fetchAllData(), 60 * 60 * 1000);\n      await this.fetchAllData();\n    } catch (err) {\n      // console.log(err);\n      // this.setState({\n      //   hasError: true\n      // });\n    }\n  }\n\n  componentWillUnmount() {\n    clearInterval();\n  }\n\n  refreshData = () => {\n    this.setState({\n      isLoading: true\n    });\n    localStorage.clear();\n    this.fetchAllData();\n  };\n\n  fetchAllData = async () => {\n    const us_stats = USData.data;\n\n    setTimeout(()=>{\n      this.setState({\n        cityData: us_stats.covid19Stats.sort((a, b) => (a.confirmed < b.confirmed) ? 1 : -1),\n        stateData: this.aggregateData(us_stats.covid19Stats),\n        lastUpdated: us_stats.lastChecked\n      });\n    },1000);\n  };\n\n  aggregateData = data => {\n    const map = data.reduce(\n      (acc, currentValue) => {\n        if (!acc.states[currentValue.province]) {\n          acc.states[currentValue.province] = [currentValue]\n        }\n        else {\n          acc.states[currentValue.province].push(currentValue)\n        }\n        return acc;\n      },\n      { states: {}}\n    );\n\n    this.setState({\n      states: map.states,\n      isLoading: false\n    });\n  };\n\n  render() {\n    const {\n      states,\n      isLoading,\n      cityData,\n    } = this.state;\n     \n    return (\n      <div className=\"d-flex w-100 h-100 p-3 mx-auto flex-column\">\n        <Header />\n        <main role=\"main\" className=\"inner cover\">\n          <div>\n            <SidePanel cityData={cityData} states={states}/>\n            {isLoading ? (\n                <LoadingSpinner />\n              ) : (\n              <div id=\"main_contents\">\n                <Statistics />\n                <Map cityData={cityData} states={states}/>\n                <StatesTable states={states} />\n              </div>\n            )}\n          </div>\n        </main>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  selectedCity: state.city,\n  selectedState: state.state\n});\n\nexport default connect(mapStateToProps,null)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport store from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}