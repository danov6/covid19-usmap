{"version":3,"sources":["LoadingSpinner.js","App.js","serviceWorker.js","index.js"],"names":["LoadingSpinner","className","role","style","position","left","top","moment","require","App","state","us_cases","us_deaths","us_recovered","stateData","hasError","lastUpdated","maxCases","maxDeaths","minCases","minDeaths","isLoading","refreshData","setState","localStorage","clear","fetchAllData","getItem","us_data","JSON","parse","setUSTotals","setMinAndMaxValues","fetch","then","res","json","data","us_stats","covid19Stats","filter","s","country","setItem","stringify","groupData","lastChecked","catch","err","console","log","grouped_data","return_data","prop","forEach","province","recovered","confirmed","deaths","lastUpdate","keyId","push","i","length","max_confirmed","count","min_confirmed","max_deaths","min_deaths","setTimeout","percent","colorProvince","this","state_data","map","key","data-state","stateAbbs","Date","startOf","fromNow","href","width","height","fontSize","marginTop","color","type","backgroundColor","ref","zoomOnScroll","containerStyle","padding","regionsSelectable","regionsSelectableOne","regionStyle","initial","fill","stroke","hover","cursor","selected","selectedHover","containerClassName","React","Component","perc","prov","r","g","Math","round","b","toString","slice","document","querySelector","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.70fee4c9.chunk.js","sourcesContent":["import React from 'react';\n\nconst LoadingSpinner = () => {\n    const styling = {\n        position: 'absolute',\n        left: '50%',\n        top: '50%'\n    };\n    return (\n        <div className=\"spinner-border text-primary\" role=\"status\" style={styling}>\n            <span className=\"sr-only\">Loading...</span>\n        </div>\n    );\n}\n\nexport default LoadingSpinner;","import React from 'react';\nimport { VectorMap } from 'react-jvectormap';\nimport './App.css';\nimport LoadingSpinner from './LoadingSpinner';\n\nvar moment = require('moment');\n\nclass App extends React.Component {\n\n  state = {\n    us_cases: 0,\n    us_deaths: 0,\n    us_recovered: 0,\n    stateData: [],\n    hasError: false,\n    lastUpdated: null,\n    maxCases: {},\n    maxDeaths: {},\n    minCases: {},\n    minDeaths: {},\n    isLoading: true,\n  };\n\n  componentDidMount(){\n    this.fetchAllData();\n  }\n\n  refreshData = () => {\n    this.setState({\n      isLoading: true,\n    });\n    localStorage.clear();\n    this.fetchAllData();\n  }\n\n  fetchAllData = () => {\n    if(localStorage.getItem('covid_data') != null && localStorage.getItem('covid_data_updated') != null  && localStorage.getItem('covid_data_recovered') != null){\n      //check localStorage\n      let us_data = JSON.parse(localStorage.getItem('covid_data'));\n\n      //set US totals\n      this.setUSTotals(us_data);\n\n      //set state max and min totals\n      this.setMinAndMaxValues(us_data);\n      \n      this.setState({\n        us_recovered: localStorage.getItem('covid_data_recovered'),\n        stateData: us_data,\n        lastUpdated: localStorage.getItem('covid_data_updated'),\n      });\n    }else{\n      //get from API\n      fetch('https://covid19-api.weedmark.systems/api/v1/stats')\n      .then(res => res.json())\n      .then(data => {\n        const us_stats = data.data.covid19Stats.filter((s) => {\n          return (s.country === 'US');\n        });\n\n        //set localStorage\n        localStorage.setItem('covid_data', JSON.stringify(this.groupData(us_stats)));\n        localStorage.setItem('covid_data_updated', data.data.lastChecked);\n        \n        this.setState({\n          stateData: this.groupData(us_stats),\n          lastUpdated: data.data.lastChecked\n        });\n      })\n      .catch(err => {\n        console.log(err)\n        this.setState({\n          hasError: true\n        });\n      });\n    }\n  }\n\n  groupData = (data) => {\n    var grouped_data = {};\n    var return_data = [];\n    data.forEach((s) => {\n      if(s.province === \"Recovered\"){\n        //save U.S receovered cases obtained from API\n        if(s.country === \"US\"){\n          localStorage.setItem('covid_data_recovered', s.recovered);\n          this.setState({\n              us_recovered: s.recovered\n          });\n        }\n      }else if(typeof grouped_data[s.province] === \"undefined\"){\n        //add new state\n        grouped_data[s.province] = {\n          province: s.province,\n          confirmed: s.confirmed,\n          deaths: s.deaths,\n          recovered: s.recovered,\n          lastUpdate: s.lastUpdate,\n          keyId: s.keyId\n        };\n      }else{\n        //update existing state\n        grouped_data[s.province].confirmed += s.confirmed;\n        grouped_data[s.province].deaths += s.deaths;\n        grouped_data[s.province].recovered += s.recovered;\n        grouped_data[s.province].keyId +=  \"|\" + s.keyId;\n      }\n    });\n\n    for(var prop in grouped_data){\n      return_data.push(grouped_data[prop]);\n    }\n\n    //set US totals\n    this.setUSTotals(return_data);\n\n    //set state max and min totals\n    this.setMinAndMaxValues(return_data);\n\n    return return_data;\n  }\n  setUSTotals = (return_data) => {\n\n    let us_cases = 0;\n    let us_deaths = 0;\n\n    //get total cases\n    for(var i=0; i < return_data.length; i++){\n      us_cases += return_data[i].confirmed;\n    }\n\n    //get total deaths\n    for(var i=0; i < return_data.length; i++){\n      us_deaths += return_data[i].deaths;\n    }\n\n    this.setState({\n      us_cases,\n      us_deaths\n    });\n  }\n\n  setMinAndMaxValues = (return_data) => {\n\n    //find max confirmed cases\n    var max_confirmed = {\n      province: \"\",\n      count: 0\n    };\n    for(var i=0; i < return_data.length; i++){\n      if(return_data[i].confirmed > max_confirmed['count']){\n        max_confirmed['count'] = return_data[i].confirmed;\n        max_confirmed['province'] = return_data[i].province;\n      }\n    }\n    //find min confirmed cases\n    var min_confirmed = {\n      province: max_confirmed['province'],\n      count: max_confirmed['count']\n    };\n    for(var i=0; i < return_data.length; i++){\n      if(return_data[i].confirmed < min_confirmed['count']){\n        min_confirmed['count'] = return_data[i].confirmed;\n        min_confirmed['province'] = return_data[i].province;\n      }\n    }\n\n    //find max deaths\n    var max_deaths = {\n      province: \"\",\n      count: 0\n    };\n    for(var i=0; i < return_data.length; i++){\n      if(return_data[i].deaths > max_deaths['count']){\n        max_deaths['count'] = return_data[i].deaths;\n        max_deaths['province'] = return_data[i].province;\n      }\n    }\n\n    //find min deaths\n    var min_deaths = {\n      province: max_deaths['province'],\n      count: max_deaths['count']\n    };;\n    for(var i=0; i < return_data.length; i++){\n      if(return_data[i].deaths < min_deaths['count']){\n        min_deaths['count'] = return_data[i].deaths;\n        min_deaths['province'] = return_data[i].province;\n      }\n    }\n\n\n    //color states on map =======NEEDS TO BE UPDATED========\n    setTimeout(() => {\n      this.setState({\n        isLoading: false\n      });\n      for(var i=0; i < return_data.length; i++){\n        var percent = 100 - ((return_data[i].deaths / max_deaths['count']) * 100);\n        colorProvince(percent, return_data[i].province);\n      }\n    }, 1000)\n  }\n\n  render(){\n    const { hasError, stateData, isLoading, us_cases, us_deaths, us_recovered } = this.state;\n    const regionControls = {\n      initial: {\n        fill: '#175c98',\n        \"borderColor\": '#fff',\n        \"fill-opacity\": 1,\n        stroke: 'none',\n        \"stroke-width\": 0,\n        \"stroke-opacity\": 1\n      },\n      hover: {\n        \"fill-opacity\": 0.8,\n        cursor: 'pointer'\n      },\n      selected: {\n        fill: 'yellow',\n        \"fill-opacity\": 1\n      },\n      selectedHover: {\n      }\n    };\n\n    const state_data = stateData.map((s,i) => {\n      return (\n        <tr key={i} data-state={stateAbbs[s.province]}>\n          <td>{s.province}</td>\n          <td>{s.confirmed}</td>\n          <td>{s.deaths}</td>\n          <td>{moment(new Date(s.lastUpdate)).startOf('hour').fromNow()}</td>\n        </tr>\n      )\n    })\n\n    return (\n      <div className=\"cover-container d-flex w-100 h-100 p-3 mx-auto flex-column\">\n        <header className=\"masthead mb-auto\">\n          <div className=\"inner\">\n            <h3 className=\"masthead-brand\">U.S Coronavirus Cases</h3>\n            <nav className=\"nav nav-masthead justify-content-center\">\n              <a className=\"nav-link active\" href=\"#\">Home</a>\n              <a className=\"nav-link\" href=\"#\">Contact</a>\n            </nav>\n          </div>\n        </header>\n        <main role=\"main\" className=\"inner cover\">\n          {isLoading ? <LoadingSpinner /> :\n            <div style={{width: '100%', height: 700}}>\n              <table style={{width: '100%', fontSize: '2em', marginTop: '8%'}}>\n                <thead>\n                  <td>Cases</td>\n                  <td>Deaths</td>\n                  <td>Recoveries</td>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td style={{fontSize: '1.5em'}}>{us_cases}</td>\n                    <td style={{color: 'red', fontSize: '1.5em'}}>{us_deaths}</td>\n                    <td style={{color: '#5aff5a', fontSize: '1.5em'}}>{us_recovered}</td>\n                  </tr>\n                </tbody>\n              </table>\n              <button type=\"button\" className=\"btn btn-success\">Refresh</button>\n              <VectorMap map={ \"us_aea\" }\n                  backgroundColor='#505050'\n                  ref='map'\n                  zoomOnScroll={false}\n                  containerStyle={{\n                      width: '100%',\n                      height: '100%',\n                      padding: '5%'\n                  }}\n                  regionsSelectable={true}\n                  regionsSelectableOne={true}\n                  regionStyle={regionControls}\n                  containerClassName=\"map\"\n                  //  onRegionClick={ clickedTeam }\n                  //  selectedRegions= { selectedRegions }\n                  //  selectedMarkers= { [] }\n                    />\n              <div className=\"table-responsive\">\n                <table style={{width: '100%', fontSize: '1.2em', color: '#fff'}} className=\"table table-striped table-sm\">\n                  <thead>\n                    <tr>\n                      <th>State</th>\n                      <th>Total Cases</th>\n                      <th>Deaths</th>\n                      <th>Last Updated</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {state_data}\n                  </tbody>\n                </table>\n              </div>\n            </div>\n          }\n        \n        </main>\n        {/* <footer className=\"mastfoot mt-auto\">\n          <div className=\"inner\">\n            <p>API's provided by <a href=\"https://github.com/CSSEGISandData/COVID-19\" target=\"_blank\">Johns Hopkins CSSE</a></p>\n          </div>\n        </footer> */}\n      </div>\n    );\n  }\n}\n\nconst stateAbbs = {\n  \"Alaska\": \"US-AK\",\n  \"Alabama\": \"US-AL\",\n  \"Arkansas\": \"US-AR\",\n  \"Arizona\": \"US-AZ\",\n  \"California\": \"US-CA\",\n  \"Colorado\": \"US-CO\",\n  \"Connecticut\": \"US-CT\",\n  \"Delaware\": \"US-DE\",\n  \"Florida\": \"US-FL\",\n  \"Georgia\": \"US-GA\",\n  \"Hawaii\": \"US-HI\",\n  \"Iowa\": \"US-IA\",\n  \"Idaho\": \"US-ID\",\n  \"Illinois\": \"US-IL\",\n  \"Indiana\": \"US-IN\",\n  \"Kansas\": \"US-KS\",\n  \"Kentucky\": \"US-KY\",\n  \"Louisiana\": \"US-LA\",\n  \"Massachusetts\": \"US-MA\",\n  \"Maryland\": \"US-MD\",\n  \"Maine\": \"US-ME\",\n  \"Michigan\": \"US-MI\",\n  \"Minnesota\": \"US-MN\",\n  \"Missouri\": \"US-MO\",\n  \"Mississippi\": \"US-MS\",\n  \"Montana\": \"US-MT\",\n  \"North Carolina\": \"US-NC\",\n  \"North Dakota\": \"US-ND\",\n  \"Nebraska\": \"US-NE\",\n  \"New Hampshire\": \"US-NH\",\n  \"New Jersey\": \"US-NJ\",\n  \"New Mexico\": \"US-NM\",\n  \"Nevada\": \"US-NV\",\n  \"New York\": \"US-NY\",\n  \"Ohio\": \"US-OH\",\n  \"Oklahoma\": \"US-OK\",\n  \"Oregon\": \"US-OR\",\n  \"Pennsylvania\": \"US-PA\",\n  \"Rhode Island\": \"US-RI\",\n  \"South Carolina\": \"US-SC\",\n  \"South Dakota\": \"US-SD\",\n  \"Tennessee\": \"US-TN\",\n  \"Texas\": \"US-TX\",\n  \"Utah\": \"US-UT\",\n  \"Virginia\": \"US-VA\",\n  \"Vermont\": \"US-VT\",\n  \"Washington\": \"US-WA\",\n  \"Wisconsin\": \"US-WI\",\n  \"West Virginia\": \"US-WV\",\n  \"Wyoming\": \"US-WY\"\n };\n\nconst colorProvince = (perc,prov) => {\n  var r, g, b = 0;\n  var color = '';\n  console.log(perc);\n  if(perc < 50) {\n    r = 255;\n    g = Math.round(5.1 * perc);\n  }\n  else {\n    g = 255;\n    r = Math.round(510 - 5.10 * perc);\n  }\n  var h = r * 0x10000 + g * 0x100 + b * 0x1;\n  color = '#' + ('000000' + h.toString(16)).slice(-6);\n  if(typeof stateAbbs[prov] !== \"undefined\" && document.querySelector(\"path[data-code=\"+ stateAbbs[prov] +\"]\") != null){\n    document.querySelector(\"path[data-code=\"+ stateAbbs[prov] +\"]\").style.fill = color;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}